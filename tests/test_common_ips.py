from pyparsing import stringEnd, ParseException
from pyzebos.parsers.common import ipv6Address
import pytest


ipv6AddressParser = ipv6Address + stringEnd

def test_ipv6addresse__parse_ok():
    ipv6addresses = [
        '::1',
        '::',
        '0:0:0:0:0:0:0:1',
        '0:0:0:0:0:0:0:0',
        '1:2:3:4:5:6:1.2.3.4',
        '1:2:3:4:5::1.2.3.4',
        '1:2:3:4::1.2.3.4',
        '1:2:3::1.2.3.4',
        '1:2::1.2.3.4',
        '1::1.2.3.4',
        '1:2:3:4::5:1.2.3.4',
        '1:2:3::5:1.2.3.4',
        '1:2::5:1.2.3.4',
        '1::5:1.2.3.4',
        '1::5:11.22.33.44',
        #
        '0:a:b:c:d:e:f::',
        '::0:a:b:c:d:e:f',
        'a:b:c:d:e:f:0::',
        
        # Additional test cases
        # from http://rt.cpan.org/Public/Bug/Display.html?id=50693
        '2001:0db8:85a3:0000:0000:8a2e:0370:7334',
        '2001:db8:85a3:0:0:8a2e:370:7334',
        '2001:db8:85a3::8a2e:370:7334',
        '2001:0db8:0000:0000:0000:0000:1428:57ab',
        '2001:0db8:0000:0000:0000::1428:57ab',
        '2001:0db8:0:0:0:0:1428:57ab',
        '2001:0db8:0:0::1428:57ab',
        '2001:0db8::1428:57ab',
        '2001:db8::1428:57ab',
        '0000:0000:0000:0000:0000:0000:0000:0001',
        '::1',
        '::ffff:0c22:384e',
        '2001:0db8:1234:0000:0000:0000:0000:0000',
        '2001:0db8:1234:ffff:ffff:ffff:ffff:ffff',
        '2001:db8:a::123',
        'fe80::',
        
        # New from Aeron
        '1111:2222:3333:4444:5555:6666:7777:8888',
        '1111:2222:3333:4444:5555:6666:7777::',
        '1111:2222:3333:4444:5555:6666::',
        '1111:2222:3333:4444:5555::',
        '1111:2222:3333:4444::',
        '1111:2222:3333::',
        '1111:2222::',
        '1111::',
        # '::',     #duplicate
        '1111:2222:3333:4444:5555:6666::8888',
        '1111:2222:3333:4444:5555::8888',
        '1111:2222:3333:4444::8888',
        '1111:2222:3333::8888',
        '1111:2222::8888',
        '1111::8888',
        '::8888',
        '1111:2222:3333:4444:5555::7777:8888',
        '1111:2222:3333:4444::7777:8888',
        '1111:2222:3333::7777:8888',
        '1111:2222::7777:8888',
        '1111::7777:8888',
        '::7777:8888',
        '1111:2222:3333:4444::6666:7777:8888',
        '1111:2222:3333::6666:7777:8888',
        '1111:2222::6666:7777:8888',
        '1111::6666:7777:8888',
        '::6666:7777:8888',
        '1111:2222:3333::5555:6666:7777:8888',
        '1111:2222::5555:6666:7777:8888',
        '1111::5555:6666:7777:8888',
        '::5555:6666:7777:8888',
        '1111:2222::4444:5555:6666:7777:8888',
        '1111::4444:5555:6666:7777:8888',
        '::4444:5555:6666:7777:8888',
        '1111::3333:4444:5555:6666:7777:8888',
        '::3333:4444:5555:6666:7777:8888',
        '::2222:3333:4444:5555:6666:7777:8888',
        '1111:2222:3333:4444:5555:6666:123.123.123.123',
        '1111:2222:3333:4444:5555::123.123.123.123',
        '1111:2222:3333:4444::123.123.123.123',
        '1111:2222:3333::123.123.123.123',
        '1111:2222::123.123.123.123',
        '1111::123.123.123.123',
        '::123.123.123.123',
        '1111:2222:3333:4444::6666:123.123.123.123',
        '1111:2222:3333::6666:123.123.123.123',
        '1111:2222::6666:123.123.123.123',
        '1111::6666:123.123.123.123',
        '::6666:123.123.123.123',
        '1111:2222:3333::5555:6666:123.123.123.123',
        '1111:2222::5555:6666:123.123.123.123',
        '1111::5555:6666:123.123.123.123',
        '::5555:6666:123.123.123.123',
        '1111:2222::4444:5555:6666:123.123.123.123',
        '1111::4444:5555:6666:123.123.123.123',
        '::4444:5555:6666:123.123.123.123',
        '1111::3333:4444:5555:6666:123.123.123.123',
        '::2222:3333:4444:5555:6666:123.123.123.123',

        # Playing with combinations of "0" and "::"
        # NB: these are all sytactically correct, but are bad form
        #   because "0" adjacent to "::" should be combined into "::"
        '::0:0:0:0:0:0:0',
        '::0:0:0:0:0:0',
        '::0:0:0:0:0',
        '::0:0:0:0',
        '::0:0:0',
        '::0:0',
        '::0',
        '0:0:0:0:0:0:0::',
        '0:0:0:0:0:0::',
        '0:0:0:0:0::',
        '0:0:0:0::',
        '0:0:0::',
        '0:0::',
        '0::',
    ]
    for ipv6address in ipv6addresses:
        try:
            tokens = ipv6AddressParser.parseString(ipv6address)
        except ParseException:
            print "ipv6 address: {}".format(ipv6address)
            raise
